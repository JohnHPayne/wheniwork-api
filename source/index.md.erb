---
title: API Reference

language_tabs:
  - shell
  - php

toc_footers:
 - <a href='mailto:support@wheniwork.com?subject=Developer Key&body=I would like to request a developer key.%0D%0A%0D%0AName:%0D%0AApp Name:%0D%0AEmail:%0D%0A'>Sign Up for a Developer Key</a>
 - <a href='http://wheniwork.com'>Powered by When I Work</a>
---

# Introduction

The When I Work API is thorough, flexible, and restful. Its methods are logically grouped and follow standard conventions. Make a selection from the left to jump to the method group you would like to know more about.

Feel free to [contact us](http://support.wheniwork.com) if something seems out of place.

## Libraries

> &nbsp;

We currently offer the following API wrappers:

* PHP: <a target="_blank" href="https://github.com/dolfelt/wheniwork-api-php">wheniwork-api-php</a>

# Authentication

> &nbsp;

Server authentication is based on a token model. The developer will authenticate using a private developer key, along with the user's credentials. Your developer key can be used like the following in the headers.

`W-Key: <%=@wiw_key%>`

Authenticating will return back a login object containing a token that can be used for all future requests. The token may be included in the headers, as a cookie, or in the query string using the key `W-Token`, like the following.

`W-Token: <%=@wiw_token%>`

Authenticating will also return back a user object, or a list of user objects if your login has access to multiple accounts. Future requests to the API will also need to include the header `W-UserId` along with the id of the user you'd like to use, like the following.

`W-UserId: 5`

## Login

> Example Request

```shell
curl <%=@api_prefix%>/2/login \
  --data '{"username":"user@example.com","password":"*******"}' \
  -H "W-Key: <%=@wiw_key%>"
```
```php
<?php
$result = Wheniwork::login(
              "<%=@wiw_key%>",
              "user@example.com",
              "*******"
          );
?>
```
> Example Response

<% json do %>
{
  "login": <%= print_json(data.objects['login']) %>,
  "users": [
    <%= print_json(data.objects['user']) %> 
  ]
}
<% end %>

>> Be sure to replace `<%=@wiw_key%>` with your requested Developer Key.

The first thing to do after you receive your Developer Key is to login to get your token. After receiving your token, you will make all future requests using your token in the header of the request.

<% aside do %>
  Remember — All post bodies must be JSON encoded data (no form data).
<% end %>

### Parameters

Key | Description
--------- | -----------
username | <strong>email</strong><br />The email of the user logging in.
password | <strong>string</strong><br />The password of the user logging in.
key | <strong>string</strong><br />Your developer key. This can be used instead of `W-Key` in the headers. You do not need both.

Once you have the token, you must include it in all authenticated requests. The `W-Key` does not need to be included.

`W-Token: <%=@wiw_token%>`


## Register

> Example Request

```shell
curl --request POST \
--url <%=@api_prefix%>/2/login/register \
--header 'w-token: iworksoharditsnotfunny' \
--data '{\n  "first_name": "Goldie",\n  "last_name": "Wilson",\n  "email": "goldiewilson@hillvalleygov.org",\n  "password": "password",\n  "password_confirm": "password",\n  "phone_number": "555-555-5555"\n}'
```
```php
<?php
$wiw = new Wheniwork('ilovemyboss');
$result = $wiw->get('shifts', [
    'first_name' => 'Goldie',
    'last_name' => 'Wilson',
    'phone_number' => '555-555-5555',
    'email' => 'goldiewilson@hillvalleycalifornia.gov',
    'password' => 'examplepassword',
    'password_confirm' => 'examplepassword',
    'subdomain' => 'abc-company'
]);
?>
```
> Example Response

<% json do %>
{
  "login": {
    "id": 4,
    "name": "",
    "first_name": "Goldie",
    "last_name": "Wilson",
    "email": "goldiewilson@hillvalleycalifornia.gov",
    "created_at": "Mon, 26 Oct 2015 14:40:15 -0500",
    "updated_at": "Mon, 26 Oct 2015 14:40:15 -0500",
    "avatar": {
      "url": "https://avatars.wheniwork.net/c1fd9b5c232ff81c735810933dfdf9b9e1e8abe0/%s",
      "size": "%s"
    },
    "token": "65f0d1a4306040505b42309e4162db877dd55905"
  },
  "user": {
    "id": 65,
    "account_id": 1,
    "login_id": "4",
    "timezone_id": 0,
    "country_id": 0,
    "migration_id": 0,
    "role": 3,
    "is_payroll": false,
    "is_trusted": 0,
    "type": 0,
    "email": "goldiewilson@hillvalleygov.org",
    "first_name": "Goldie",
    "last_name": "Wilson",
    "phone_number": "+15555555555",
    "employee_code": "",
    "avatar": {
      "url": "https://avatars.wheniwork.net/9d0516034a9ce34fc5b1c96ee98d8b7d30286fd7/%s",
      "size": "%s"
    },
    "password": false,
    "activated": false,
    "is_hidden": false,
    "uuid": "5819cc3cc4883edef82fb92df64f6c1aa9dd2901",
    "notes": "",
    "affiliate": 0,
    "is_private": false,
    "infotips": "",
    "hours_preferred": 0,
    "hours_max": 0,
    "hourly_rate": 0,
    "alert_settings": {
      "timeoff": {
        "sms": false,
        "email": true
      },
      "swaps": {
        "sms": false,
        "email": true
      },
      "schedule": {
        "sms": false,
        "email": true
      },
      "reminders": {
        "sms": false,
        "email": true
      },
      "availability": {
        "sms": false,
        "email": true
      },
      "new_employee": {
        "sms": false,
        "email": true
      },
      "attendance": {
        "sms": false,
        "email": false
      }
    },
    "reminder_time": 0,
    "sleep_start": "",
    "sleep_end": "",
    "my_positions": [],
    "last_login": null,
    "dismissed_at": "",
    "notified_at": null,
    "created_at": "Mon, 26 Oct 2015 14:40:15 -0500",
    "updated_at": "Mon, 26 Oct 2015 14:40:15 -0500",
    "is_deleted": false,
    "login_email": "goldiewilson@hillvalleygov.org",
    "timezone_name": null
  }
}
<% end %>

>> Be sure to replace `<%=@wiw_key%>` with your requested Developer Key.

The first thing to do after you receive your Developer Key is to login to get your token. After receiving your token, you will make all future requests using your token in the header of the request.

<% aside do %>
  Remember — All post bodies must be JSON encoded data (no form data).
<% end %>

### Parameters

Key | Description
--------- | -----------
<% param "first_name", "string" do %>The first name of this user.<% end %>
<% param "last_name", "string" do %>  The last name of this user.<%end%>
<% param "phone_number", "string" do %>  The phone number of this user.<%end%>
<% param "email", "string" do %>  The email address of this user.<%end%>
<% param "password", "string" do %> The password of this user.<%end%>
<% param "password_confirm", "string" do %> The password of this user.<%end%>
<% param "subdomain", "string" do %> The subdomain of this user.<%end%>
<% param "account_id", "string(optional)" do %> The account id of this user.<%end%>




## Web App SSO

> Example Request

```shell
curl -X POST <%=@api_prefix%>/2/users/autologin \
 -H "W-Token: <%=@wiw_token%>"
```
```php
<?php
$wiw = new Wheniwork("<%=@wiw_token%>");
$result = $wiw->post("users/autologin");
?>
```

> Example Response

<% json do %>
{
  "user": <%= print_json(data.objects['user'], :include=>{
    :token=>@wiw_token
  }) %>,
  "hash": "the_auto_login_hash"
}
<% end %>

If you find any need to send an authenticated user into the web app without requiring them to log in, you can generate a unique hash that will log them into the app automatically.

You can then use the `al` (autologin) query parameter to accomplish this. An example would be sending the user to the following URL:

`http://app.wheniwork.com/scheduler?al={the_auto_login_hash}`


## Related Objects

> Examples

```shell
curl <%=@api_prefix%>/2/shifts?include_objects=true
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects=false
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects=users
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects=positions,locations
```
```shell
curl <%=@api_prefix%>/2/shifts?include_objects[]=positions&include_objects[]=locations
```

By default, all responses from the API will include related objects. For example, when calling the `shifts` endpoint, the response will also include a `users` array with all the employees for those shifts.

Including related objects is controlled by the `include_objects` parameter, which can either be boolean, a comma-separated list, or an array. Boolean values are recognized as `true`, `yes`, `on`, and `1` and the inverse of each. To completely disable the inclusion of related objects, use `false`.

<% aside do %>
  The default value for `include_objects` is `true`.
<% end %>

# Shifts

<%= partial "methods/shifts" %>

# Accounts

<%= partial "methods/accounts" %>

# Login

<%= partial "methods/login" %>

# Users

<%= partial "methods/users" %>

# Positions

<%= partial "methods/positions" %>

# Locations

<%= partial "methods/locations" %>

# Sites

<%= partial "methods/sites" %>

# Blocks

<%= partial "methods/blocks" %>

# Requests

<%= partial "methods/requests" %>

# Swaps

<%= partial "methods/swaps" %>

# Availabilities

<%= partial "methods/availabilities" %>

# Payrolls

<%= partial "methods/payrolls" %>

# Times

<%= partial "methods/times" %>

# Batch

<%= partial "methods/batch" %>

# Messages

<%= partial "methods/messages" %>

# Send

<%= partial "methods/send" %>

# Templates

<%= partial "methods/templates" %>

# Plans

<%= partial "methods/plans" %>

# Annotations

<%= partial "methods/annotations" %>

# Devices

<%= partial "methods/devices" %>

# Errors

When I Work uses the following error codes:


Error Code | Meaning
---------- | -------
400 | Bad Request -- The request is not valid
401 | Unauthorized -- The API key is wrong or the query is misplaced
403 | Forbidden -- The request is below the required permission level
404 | Not Found -- The specified request could not be found
405 | Method Not Allowed -- You tried to access a user with an invalid method
406 | Not Acceptable -- You requested a format that isn't JSON
410 | Gone -- The user requested has been removed
418 | An undefined error occurred
429 | Too Many Requests -- The server is not able to address the number of queries
500 | Internal Server Error -- An internal server error occurred
503 | Service Unavailable -- The service is temporarily offline for maintenance

